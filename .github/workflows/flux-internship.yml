name: Publish release on version change.
# Based on https://github.com/actions/starter-workflows/blob/master/ci/go.yml
on:
  push:
    branches: [ main ]

# If version.ini has been updated, build the project 
# and create a new release.

# - Checkout at HEAD.
# - Install dependencies for get-release-log action.
# - Extract current_version from version.ini.
#   - Version Format
#   - NLP_Version = V0.1.0
#   - current_version = 0.1.0
# - Compare current and release versions and generate release_log
# - Setup project and build binary.
# - Create a new release.
#   - tag_name = `V${current_version}`.
#   - body = release_log
#  - Upload release assets (built binary). 

jobs:
  check-and-release:
    name: Publish release if a new version is in the current branch.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout HEAD.
        uses: actions/checkout@v2

      - run: npm install --prefix .github/actions/get-release-log
        
      # Version Format
      # NLP_Version = V0.1.0
      # Extract V0.1.0, remove whitespace.
      - name: Store current version in CURR_VER.
        id: current_version
        run: |
          CURR_VER=$(awk -F "=" '/NLP_Version/ {gsub(/^[ \t]+/, "", $2); gsub(/[ \t]+$/, "", $2); print $2}' NLP_version.ini)
          echo "::set-output name=current_version::${CURR_VER:-0.0.0}"
          echo ${CURR_VER}
      - name: Compare release version and generate release log.
        id: generate_release_log
        uses: ./.github/actions/get-release-log
        with:
          api-token: ${{ secrets.GITHUB_TOKEN }}
          current-version: ${{ steps.current_version.outputs.current_version }}
          base-ref: "develop"

#      - name: Set up Go 1.x
#        uses: actions/setup-go@v2
#        with:
#          go-version: ^1.14
#        id: go
#
#      - name: Get dependencies
#        run: |
#          go get -v -t -d ./...
#          if [ -f Gopkg.toml ]; then
#              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#              dep ensure
#          fi
#
#      - name: Build project
#        run: |
#          make build

      - name: Tag with current version.
        run: |
          git tag ${{ steps.current_version.outputs.current_version }}
          git push origin ${{ steps.current_version.outputs.current_version }}
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.current_version.outputs.current_version }}
          # ex. V2.8.9, V is included in the current_version string.
          release_name: Release ${{ steps.current_version.outputs.current_version }} of NLP Engine
          body: |
            ${{ steps.current_version.outputs.current_version }}
            Features added/improved in NLP:
            ${{ steps.generate_release_log.outputs.release_log}}
          draft: false
          prerelease: false

#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          asset_path: ./build/test
#          asset_name: test
#          asset_content_type: application/octet-stream
