name: Create Release
on:
  push:
    branches: [ main ]
jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v2
      - name: setup python
        uses: actions/setup-python@v2
        with:
         python-version: '3.x'
         architecture: 'x64'
      - name: GET Last Version
        id: lastVersion
        uses: oprypin/find-latest-tag@v1
        with:
          repository: ${{ github.repository }}
          releases-only: true 
      - name: Read current_version from version.ini file
        id: currentVersion
        uses: juliangruber/read-file-action@v1
        with:
          path: ./version.ini
        env:
          CURRENT_VERSION: ${{ steps.currentVersion.outputs.content }}
          LAST_VERSION:  ${{ steps.lastVersion.outputs.tag }}  #0.0 default if statement
      - run: |
          echo "last version ${{ steps.lastVersion.outputs.tag }}"
          echo "current version ${{ steps.currentVersion.outputs.content }}"
          echo last version $LAST_VERSION
          echo current version $CURRENT_VERSION
          
      - name: Is last version exists
        id: isLastVersionNull
        if: steps.lastVersion.outputs.tag == null
        run: |
          run LAST_VERSION = 0.0.0
          echo "Last version does not exists so, DEFAULT LAST_VERSION = 0.0.0"
        continue-on-error: true
      
      - name: isCurrentVersionCorrect
        id: isCurrentVersionCorrectId
        run: |
          output=$(python compareVersions.py ${{ steps.currentVersion.outputs.content }} ${{ steps.lastVersion.outputs.tag }})
          echo "::set-output name=changelog::$output"
          
      - name: Print changelog of isCurrentVersionCorrectId
        run: echo ${{ steps.isCurrentVersionCorrectId.outputs.changelog }}
      
      - name: compare current and last version
        id: compareVersions
        if: ${{ steps.isCurrentVersionCorrectId.outputs.changelog }}
        run: |
          echo "Current Version <= last version, So no version update and no release as well, exit 1"
          exit 1  
          
      - run: |
          echo $LAST_VERSION
          echo "current version $CURRENT_VERSION"
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.currentVersion.outputs.content }}
          release_name: Release ${{ steps.currentVersion.outputs.content }}
          body: |
            Changes in this Release2
            - First Change
            - Second Change
          draft: false
          prerelease: false
